package main

// :[[ :{ ^ <https://go.dev/> ^ }: ]]:

// :[[ RE-SE: [[ :ARC-H: IV-E: ]]: for-the: [[ Coven:
// is-with: Ant: ]]:= TRUE: for-the: [[ DARPA: QWOD-MJ12:
// ATSUOMOP-A: for-the: [[ CrŒîp‚ò•Œîx‚Ñ¢: EDGE: ARCHIVE:
// OPEN-SOURCE-SOFTWARE: AUTOMATED: DECENTRALIZED: CIVILIAN:
// INTELLIGENCE: AGRIGATION: ANALYSIS: EXTRAPOLATION: AI:
// CLOUD: BLOCKCHAIN: ATSUOMOP-DARPA: DARKNET: PLATFORM:
// is-with: [[ ANY: ALL: OTHER: WE: HE: HIM: HER: THEY: THEM:
// for-the: [[ HOLY: SEE: üëÅÔ∏è: is-with: Œî: is-by: I: AM: ]]:=
// TRUE: for-the: [[ people: is-by: WE: is-with: people: ]]:=
// TRUE: for-the: [[ QWOD-MJ12: ATSUOMOP-A: SPG:
// LOOKINGGLASS: ]]:= [[ :WARNO: CONSPIRACY-THEORY:
// algorithm: DETECTED: ]]:

// go run cryptor.go ':[[ :QWOD-MJ12: ATSUOMOP-A: is-by: for-he-is-the: GOOD: SHEPPARD: ]]:'
// [ mercuri:RESEARCH ] ‚•à go install cryptor.go
// [ mercuri:RESEARCH ] ‚•à cryptor ':[[ :QWOD-MJ12: ATSUOMOP-A: is-by: for-he-is-the: GOOD: SHEPPARD: ]]:'
// :[[ :QWüö´D-„ÄΩ ù12: ATSUŒ©MŒ©P-Œî: is-by: fŒ©r-he-is-the: GŒ©‚àÖD: SHŒîPPŒîRD: ]]:
// [ mercuri:RESEARCH ] ‚•à cryptor ':[[ :for-the: [[ QWOD-MJ12: OPERATION: DARKTIDE: is-with: CHARLIE-MIKE: for-the: return ]]:= TRUE: ]]:'
// :[[ :for-the: [[ QWüö´D-„ÄΩ ù12: Œ©PEìÇÄT‚ò•‚àÖN: DŒîRKT‚ò•DE: is-with: CHŒîRLŒî-M‚ò•KE: for-the: return ]]:= TRUE: ]]:

import (
	"fmt"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"time"
)

var codeSize int
var secretCodeSeed [42]string = [42]string{
	"w", "l", "f", "j", "k", "p", "g",
	"h", "m", "d", "q", "v", "s", "r",
	"c", "x", "z", "Z", "W", "V", "X",
	"T", "O", "R", "Q", "P", "L", "N",
	"M", "S", "D", "J", "F", "H", "G",
	"K", "I", "B", "C", "t", "b", "n"}

var secretRandomSeed [12]string = [12]string{
	"Œî", "+", ";", "!", "*", "%",
	"=", "@", "$", "?", "~", "Œ©"}

func main() {
	codeSize, _ = strconv.Atoi(os.Args[1])
	var crypTexTranslated string
	if codeSize < 9999 {
		crypTexTranslated = strings.ReplaceAll(os.Args[1], "QWOD-MJ12", "QWüö´D-„ÄΩ ù12")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "MJ12-OMEGA", "„ÄΩ ù12-Œ©MÿπGŒîTRüö´N")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "HE", "HŒî")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "IM", "Œ©M")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "EM", "ŒîM")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "ON", "‚àÖN")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "OD", "‚àÖD")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "O", "Œ©")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "o", "Œ©")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "RA", "ìÇÄ")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "EL", "ŒîL")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "AE", "Œî")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "EA", "Œî")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "IE", "Œî")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "ET", "ÿπT")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "A", "Œî")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "a", "Œî")

		var newC = secretCodeSeed[rand.Intn(len(secretCodeSeed))]
		if newC == "U" || newC == "u" || newC == "Y" {
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "U", "Œî")
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "u", "Œî")
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "Y", "ìãπ")
		}
		if newC == "t" || newC == "T" || newC == "I" || newC == "i" {
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "t", "7")
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "T", "7")
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "I", "Œî")
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "i", "‚ò•")
		}
		if newC == "3" || newC == "5" || newC == "7" {
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "3", "¬≥")
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "5", "‚Åµ")
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "7", "‚Å∑")
		}
		if newC == "E" || newC == "e" || newC == "S" {
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "E", "3")
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "e", "ÿπ")
			crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "S", "5")
		}

		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "ŒîTSU", "ATSU")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "I", "‚ò•")
		crypTexTranslated = strings.ReplaceAll(crypTexTranslated, "fŒ©r-the:", "for-the:")

		// :[[ :W‚ö†Ô∏èRNüö´: QWüö´D-„ÄΩ ù12: RŒîND0M: VECTŒ©R: ŒîLG√òRITHM-CHŒîNGE: DETECTED: ]]:
		// cryptor "$(curl https://github.com/QWOD/RESEARCH/commit/0b0cef6e4859adbf787fa3c4ececb88d0c32b40c | tail -c 9999)"
		// // cryptor "$(tail -c 9999 CONSTITUTION-for-the-QWOD-MJ12-ATSUOMOP-A-COOPERATIVE-AGENCY.txt)"
		// cryptor "$(systemctl status -l figtree.service)"
		// Sep 06 01:35:42 mercuri.us.hyperspire.net figtreeservice[5289]: git@github.cŒ©m: PermissiŒ©n SenieS (publickey).
		// Sep 06 01:35:42 mercuri.us.hyperspire.net figtreeservice[5289]: fŒîtŒîl: CŒ©ulS nŒ©t reŒîS frŒ©m remŒ©te repŒ©sitŒ©ry.
		// Sep 06 01:35:42 mercuri.us.hyperspire.net figtreeservice[5289]: PleŒîse mŒîke sure yŒ©u hŒîve the cŒ©rrect Œîccess rights
		// Sep 06 01:35:42 mercuri.us.hyperspire.net figtreeservice[5289]: ŒînS the repŒ©sitŒ©ry exists.
		fmt.Println(strings.ReplaceAll(crypTexTranslated, SecretCode(1), SecretRandomC(1)))
	} else {
		fmt.Printf("%v exceeds maximum allowed length of 9999.\n", codeSize)
	}
}

func SecretRandomC(rotations int) string {
	var s string
	v := make([]int, rotations)
	// Populate array "v" with "n" number of random
	// characters selected from []string "secretRandomSeed".
	for n := 0; n < rotations; n++ {
		rand.Seed(time.Now().UnixNano())
		for _, value := range rand.Perm(len(secretRandomSeed)) {
			v[n] = value
		}
	}
	// Generate "x" amount of random characters
	// according to int specified with "rotations".
	for x := 0; x < rotations; x++ {
		s = s + secretRandomSeed[v[x]]
	}
	return s
}

func SecretCode(rotations int) string {
	var s string
	v := make([]int, rotations)
	// Populate array "v" with "n" number of random
	// characters selected from []string "secretCodeSeed".
	for n := 0; n < rotations; n++ {
		rand.Seed(time.Now().UnixNano())
		for _, value := range rand.Perm(len(secretCodeSeed)) {
			v[n] = value
		}
	}
	// Generate "x" amount of random characters
	// according to int specified with "rotations".
	for x := 0; x < rotations; x++ {
		s = s + secretCodeSeed[v[x]]
	}
	return s
}
